FlaskCBV SETTINGS
=================


settings:
    APPLICATIONS - кортеж с указанием списка прилажений
                   по этому списку будет создан список директорий где искать шаблоны
    DEFAULT_HEADERS - словарь с заголовками по умолчанию для ответа клиенту
    
    FLASKCONFIG - переменная с именем модуля настроек для Flask
                  указание модуля от точки запуска(apps/flaskconfig)
    TEMPLATE_PATH - кортеж со списком директорий для поиска шаблонов
                    по умолчанию шаблоны лежат в дирректории 'templates' от корня проекта
    STATIC_PATH - директория в которой сервер будет искать/собирать статику
    STATIC_URL  - хендлер(url) для статики
    
    

urls.py:
    Модуль с опредилениями хендлеров сервера через пространства имен(namespace)
    
    должен задавать переменную "namespaces" через make_urls
    
    Терминалогия:
      - хендлер(в терминалогии Flask: route): некий url (в виде строки), на который будет приходить запрос
      - namespace: пространство имен, внутри которого могут быть определены свои хендлеры
     
    Суть:
      в urls.py задается переменная namespaces путем вызова make_urls()
      в make_urls передается кортеж доступных хендлеров путем создания экземпляров класса Url;
      Конструктор Url(...) позволяет:
        - задать класс для обработки заданного хендлера(для этого необходимо опредилить его name)
          пример: 
            Url('', mainView(), name="main"), 
            где mainView - это view класс импортированный из views.py;
          
        - определить новый namespace, включив "namespases" из другово urls.py
          пример: 
            Url('/', include(main.urls.namespases, namespace='main')),
            здесь мы импортируем из urls.py прилажения "main" его namespaces;
       
      Для опредиления класса для обработки заданного хендлера, 
    
    
FlaskCBV API
============

Модуль flaskcbv.url:
    Url         - класс опредиляющий namespace, по средствам которого можно задать хендлер
                в качестве параметров принимает:
                url - адрес хендлера
                obj - некий объект который может быть:
                  - экземпляром класса View(или наследного от него)
                  - результат выполнения метода as_view класса View(или наследного от него)
                  - результат выполнения функции flaskcbv.url.include
                name - необходим при подключении класса используемого представления, для того что бы опредилить название(ident) используемого хендлера;
                
                  
    include     - функция, позволяющая подключить в заданный namespace сторонний urls.py;
                в качестве параметров принимает:
                namespaces импортированный из другого модуля
                namespace - строка, опредиляет название(ident) пространства имен включенного urls.namespaces
                
    make_urls   - функция, позволяющая создать массив хендлеров со всеми настройками в виде необходимом flaskcbv;
    
    
    В последствии по названиям [namespace, name] можно будет получить полный url хендлера для представления его в шаблонах


Модуль flaskcbv.conf:
    Settings    - класс который берет название модуля настроек из ENVIRONMENT_VARIABLE, и по опредиленным в нем переменным
                  создает экземпляр с аналогичным атрибутами(заглавные буквы);
                  В момент создания дополняет не заданные аттрибуты аттрибутами по умолчанию.
                  
                  Использование:
                  from flaskcbv.conf import Settings
                  settings = Settings()
                  print settings.TEMPLATE_DIRS
                  
    settings    - готовый экземпляр класса Settings
                  Использование:
                  from flaskcbv.conf import settings
                  print settings.TEMPLATE_DIRS
                  
    примечание: предпочтительнее использовать именно settings;

    

Представления flaskcbv.view:

    View        - базовый класс используемый для создания представления
                аттрибуты и методы:
                
                AVALIBLE_METHODS - аттрибут опредиляющий список методов доступных для обработки данному классу(на остальные вернет 405)
                
                request: аттрибут экземпляра класса View, экземпляр: flaskcbv.request.Request
                
                as_view(name, *cls_args, **cls_kwargs) - метод класса, конвертирует класс в актуальную функцию представления для дальнейшего его задания в urls.py
                  метод инстанцирует класс "на лету" при каждом запросе и вызывает его prepare;
                  параметры:
                    name: название представления
                    *args, **kwargs;

                prepare(*args, **kwargs) - первый метод который будет вызван при поступлении запроса пользователя
                  передает принимаемые *ars, **kwargs дальше в dispatch
                  запускает dispatch(), получая от него объект ответа: Response()
                  возвращяет результат вызова метода render полученного объекта.
                  должен вернуть экземпляр flask.stream_with_context.Response
                  Для этого использует метод get_headers для установки заголовков ответа;

                dispatch(request, *args, **kwargs) - основной метод обработки запроса.
                  вызывается из prepare()
                  в качетсве параметра принимает объект request;
                  мо методу запроса (GET, POST, ...) определяет для запуска соответствующий метод возвращая его результат;
                  возвращает экземпляр класса flaskcbv.response.Response;
                  
                get.post - переопредиляемые методы которые будет вызван при соответствующем запросе
                  возвращает экземпляр класса flaskcbv.response.Response;
                  
                get_headers - возвращает словарь заголовков для ответа клиенту.
                  словарь будет дополнен заголовками "по умолчанию" из модуля настроек
                  
                get_current_url - метод, возвращающий url данного представления (опредилен в urls.py);
                
                
                get_all_urls - метод, возвращает список абсалютно все url опредиленных для данного проекта
                
                is_abort_exception(exception) - метод, который опредиляет - является переданное ему исключение исключением Flask типа: abort или ему подобным
                
                test_abort_exception(exception) - метод, который вызовет переданное ему исключение в случае если оно является исключением Flask типа abort или ему подобным;
                
                
                
                
    TemplateView    - класс наследованный от View, позволяющий выводить шаблона
                аттрибуты и методы:
                
                template - аттрибут задающий путь к шаблону.
                
                get_template_name() - переопредиляемый метод который по аттрибуту template возвращает путь к шаблону
                
                get_context_data() - переопредиляемый метод который возвращает словарь переменных шаблона(context)
                    в качастве одной из переменных контекста идет "request", через которую в шаблоне можно обратиться к параметрам запроса;
                
                render_template() - метод который возвращает обработанный шаблон для вывода пользователю
                
                get(request, *args, **kwargs) - метод который запускает всё вышеперечисленное и отдает в качестве ответа объект с обработанным шаблоном;
                
                
    TemplateIsAjaxView - наследуется от TemplateView, переопредиляя get_template_name
                данный метод в зависимости от типа запроса(ajax или нет) использует указанный шаблон с (или без) приставкой: "-ajax", 
                например для index.tpl при ajax запросе будет найден index-ajax.tpl, а для заданного index-ajax.tpl при обычном запросе - "index.tpl";
                
                
                

                
                
Примеси flaskcbv.view.mixins:

    JSONMixin
        аттрибуты и методы:
        
        json_default - функция которая будет передана json.dumps (параметром default)
        json_cls - класс который будет передан json.dumps (параметром cls)
        
        get_json_cls() - переопредиляемый метод, возвращает аттрибут json_cls
        
        get_json_indent() - переопредиляемый метод возвращающий отступ для формируемого json
        
        get_json_kwargs(**kwargs) - метод возвращающий параметры для json.dumps
                                    использует все вышеперечисленные аттрибуты и методы.
                                    
        get_context_data(**kwargs) - возвращает/обновляет переменные контекста. 
                                 пытается вызвать одноименный метод у родителя, в случае неудачи возвращает полученный из параметров словарь;
                                 
        get_as_json_data(**data) - метод, который с учетом полученных из параметра данных вызывает и обновляет get_context_data;
                                 задает переменные json по умолчанию:
                                 'errno': 0, 'error': 'Ok', details: '',
                                 
                                 В случае ошибки вызова get_context_data вернет:
                                 'errno': -1, 'error': 'Failed', details: содержание ошибки,
                                 
                                 Возвращаемое значение; словарь с данными для обработки json
                                 
        get_as_json(**data) - метод, формирующий json с использованием get_as_json_data(**data)
        
        json_error(errno=-1, error='Failed', details='', **data) - формирует ошибку в формате json;
        
        
        
        
        
        
    getArgumentMixin
    
    
    
    
Объект запроса flaskcbv.request.Request :
  наследован от flask.wrappers.Request
  
  доп. свойства:
  is_ajax - аналог is_xhr
  remote_addr - возвращает ip адрес клиента (по заголовку "HTTP_X_REAL_IP", или по вызову базового remote_addr).


Объект ответа flaskcbv.response.Response :
  конструктор принимает в качестве параметра данные которые надо будет отправить клиенту(например шаблон, в виде строки)
  если в качестве данных переданна функция - при вызове render функция будет вызвана и её ответ представлен в качестве данных
  если в качестве данных передан итератор, то при вызове render с помощью flask.stream_with_context будет возвращать данные постепенно(полезно для больших объемов данных ответа).
  
  методы:
  
  add_header(name, value) - добавить заголовок name в ответ
  
  get_headers(): вернет заголовки по умолчанию дополненные заголовками установленными через add_header()
  
  render(headers={}): вернет flask.Response


Объект ответа flaskcbv.response.ResponseRedirect :
  Наследует flaskcbv.response.Response, 
  конструктор принимает адрес перенаправления и код ошибки(по умолчанию 302)
  
  render возвращает flask.redirect
  


Получение singletone Flask: flaskcbv.core.base.get_flask







СХЕМА РАБОТЫ:
=============

Запуск:
  забирает из переменных окружения заданный через "ENVIRONMENT_VARIABLE" модуль настроек проекта: settings
  используя flaskcbv.conf.Settings создает singletone settings с настройками проекта, в качестве аттрибутов которого доступны параметры заданные в settings проекта;
  символы во всех аттрибуты settings преаброзуются в заглавные;
  
  Инстанцирует экземпляр Flask из flaskcbv.core.base (наследованный от flask.Flask), в котором задает пути к шаблонам, и инициализирует jinja_loader;
  Запускает обработку urls.py, создавая в flask для каждого url правило путем вызова "add_url_rule"

  Находит и регистрирует templatetags используя flaskcbv.templates.register_tags;
  
  
Обработка запроса:
  При получании запроса вызывается prepare() указанного класса представления.
  Этот метод вызывает dispatch, который опредиляет "METHOD" запроса и вызывает соответственно get() или post() (или другой опредиленный для этого типа метод)
  последний должен вернуть flaskcbv.Response, в котором prepare вызовет render для создания ответа для Flask;



